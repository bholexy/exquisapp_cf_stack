#
#
# Run this script like this: aws cloudformation create-stack --region eu-central-1 --stack-name prodstack --template-body file:///opt/cfstacks/prodstack.template --parameters file:///opt/cfstacks/stack_parameters.json
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Private VPC and resources for PROD."

Parameters:
  SSHPass:
    Type: String
  SshKeyParameter:
    Description: SSH SshKeyParameter to login to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'


Resources:

  MyWorkBenchEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
      - MyNodeEC2Instance
      - MyEC2Instance
    Properties:
      ImageId: "ami-3ecc8f46"
      InstanceType: "t2.small"
      KeyName: !Ref 'SshKeyParameter'
      SubnetId: !Ref mySubnet
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: "gp2"
            #Iops: "200"
            DeleteOnTermination: "true"
            VolumeSize: "20"
        - DeviceName: "/dev/sdk"
          NoDevice: {}
      UserData:
        Fn::Base64:                                # YAML makes userdata much  cleaner
          !Sub |
              #!/bin/bash -ex
              MasterIP=${MasterElasticIP}
              NodeIP=${NodeElasticIP}
              SSHPass=${SSHPass}
              /usr/bin/hostnamectl set-hostname WorkBench;
              yum -y install epel-release;
              yum -y update;
              /usr/bin/sed -i -e 's/PasswordAuthentication\ no/PasswordAuthentication\ yes/g' /etc/ssh/sshd_config;
              /usr/bin/systemctl restart sshd.service;
              useradd exquisapp;
              echo $SSHPass | passwd exquisapp --stdin;
              echo 'exquisapp  ALL=(ALL:ALL) NOPASSWD: ALL' >> /etc/sudoers;
              yum install -y ansible git;
              cd /home/exquisapp;
              git clone https://github.com/bholexy/exquisapp_kube_cluster.git;
              cd /home/exquisapp/exquisapp_kube_cluster/centos;              
              /usr/bin/sed -i -e "s/52.58.40.195/$MasterIP/g" hosts;
              /usr/bin/sed -i -e "s/35.156.42.153/$NodeIP/g" hosts;
              /usr/bin/sed -i -e "s/linuxjobber/exquisapp/g" hosts;
              /usr/bin/sed -i -e "s/bolu/$SSHPass/g" hosts;
              ansible-playbook setup_master_node.yml;
              ansible-playbook setup_worker_nodes.yml;
              ansible-playbook main.yml

      Tags:
      - Key: Name
        Value: WorkBench
      SecurityGroupIds:
      - !Ref InstanceSecurityGroup


  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-3ecc8f46"
      InstanceType: "t2.small"
      KeyName: !Ref 'SshKeyParameter'
      SubnetId: !Ref mySubnet
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: "gp2"
            #Iops: "200"
            DeleteOnTermination: "true"
            VolumeSize: "20"
        - DeviceName: "/dev/sdk"
          NoDevice: {}
      UserData:
        Fn::Base64:                                # YAML makes userdata much cleaner
          !Sub |
              #!/bin/bash -ex
              SSHPass=${SSHPass}              
              /usr/bin/hostnamectl set-hostname ProdMaster;
              yum -y install epel-release;
              yum -y update;
              /usr/bin/sed -i -e 's/PasswordAuthentication\ no/PasswordAuthentication\ yes/g' /etc/ssh/sshd_config;
              /usr/bin/systemctl restart sshd.service;
              useradd exquisapp;
              echo $SSHPass | passwd exquisapp --stdin;
              echo 'exquisapp  ALL=(ALL:ALL) NOPASSWD: ALL' >> /etc/sudoers;
      Tags:
      - Key: Name
        Value: ProdMaster
      SecurityGroupIds:
      - !Ref InstanceSecurityGroup

  MyNodeEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-3ecc8f46"
      InstanceType: "t2.small"
      KeyName: !Ref 'SshKeyParameter'
      SubnetId: !Ref mySubnet
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: "gp2"
            #Iops: "200"
            DeleteOnTermination: "true"
            VolumeSize: "20"
        - DeviceName: "/dev/sdk"
          NoDevice: {}
      UserData:
        Fn::Base64:                                # YAML makes userdata much cleaner
          !Sub |
              #!/bin/bash -ex
              SSHPass=${SSHPass}
              /usr/bin/hostnamectl set-hostname ProdNode;
              yum -y install epel-release;
              yum -y update;
              /usr/bin/sed -i -e 's/PasswordAuthentication\ no/PasswordAuthentication\ yes/g' /etc/ssh/sshd_config;
              /usr/bin/systemctl restart sshd.service;
              useradd exquisapp;
              echo $SSHPass | passwd exquisapp --stdin;
              echo 'exquisapp  ALL=(ALL:ALL) NOPASSWD: ALL' >> /etc/sudoers;

      Tags:
      - Key: Name
        Value: ProdNode
      SecurityGroupIds:
      - !Ref InstanceSecurityGroup

  MasterElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref MyEC2Instance
    

  NodeElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref MyNodeEC2Instance


  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: LJVPC

  mySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-west-2b"
      MapPublicIpOnLaunch: True
      CidrBlock: 10.10.1.0/24
      Tags:
      - Key: Name
        Value: ProdSubnet
      VpcId: !Ref myVPC

  privateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-west-2b"
      MapPublicIpOnLaunch: True
      CidrBlock: 10.10.16.0/20
      Tags:
      - Key: Name
        Value: PrivateSubnet
      VpcId: !Ref myVPC      

  routeTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
      - Key: Name
        Value: prodRouteTable

  publicRoute:
    Type: AWS::EC2::Route
    DependsOn: myInternetGateway
    Properties:
      RouteTableId:
        Ref: routeTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: myInternetGateway

  mySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: mySubnet
      RouteTableId:
        Ref: routeTable

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: publicFacingGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "this is PROD required Ports"
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80 
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 5000
        ToPort: 5000
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 7000
        ToPort: 7000
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 4000
        ToPort: 4000
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        CidrIp: 0.0.0.0/0    
      - IpProtocol: tcp
        FromPort: 8000
        ToPort: 8000
        CidrIp: 0.0.0.0/0     
      - IpProtocol: tcp
        FromPort: 58500
        ToPort: 58500
        CidrIp: 0.0.0.0/0               
      - IpProtocol: tcp
        FromPort: 4100
        ToPort: 4100
        CidrIp: 0.0.0.0/0        
      - IpProtocol: tcp
        FromPort: 5100
        ToPort: 5100
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 30000
        ToPort: 30000
        CidrIp: 0.0.0.0/0  
      - IpProtocol: tcp
        FromPort: 30700
        ToPort: 30700
        CidrIp: 0.0.0.0/0  
      - IpProtocol: tcp
        FromPort: 30800
        ToPort: 30800
        CidrIp: 0.0.0.0/0  
      - IpProtocol: tcp
        FromPort: 31000
        ToPort: 31000
        CidrIp: 0.0.0.0/0 
      - IpProtocol: tcp
        FromPort: 6443
        ToPort: 6443
        CidrIp: 0.0.0.0/0   
      - IpProtocol: tcp
        FromPort: 10250
        ToPort: 10250
        CidrIp: 0.0.0.0/0                            
#      - IpProtocol: tcp
#        FromPort: 3306
#        ToPort: 3306
#        CidrIp: 192.168.1.0/25
      SecurityGroupEgress:
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0 
        ToPort: 65535
        CidrIp: 0.0.0.0/0

Outputs:
  InstanceId:
    Value: !Ref MyEC2Instance
  VPCId:
    Value: !Ref myVPC
  RouteTableId:
    Value: !Ref routeTable
  MPublicIp:
    Value: !GetAtt MyEC2Instance.PublicIp
  NPublicIp:
    Value: !GetAtt MyNodeEC2Instance.PublicIp  
  WPublicIP:
    Value: !GetAtt MyWorkBenchEC2Instance.PublicIp 

